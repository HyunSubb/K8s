apiVersion: apps/v1
kind: Deployment
metadata:
    name: ordersystem-backend
    namespace: hyunsub
spec:
    # Deployment나 StatefulSet이 유지할 "옛날 ReplicaSet"의 수를 제한하는 옵션. 자원공간의 낭비 방지 및 관리의 편의성.
    # pod를 새롭게 만들고 싶어서 rollout restart 명령어를 사용하면 replicaset이 새롭게 만들어진다고 했음. (revision)
    # 근데 replicaset을 몇개를 만들거냐. rollout restart 할 때마다 쌓임. 근데 rollout restart는 매우 빈번하게 일어남.
    # replicaset이 너무 많아지면 곤란하니까 개수를 제한하는 명령어임.
    revisionHistoryLimit: 2
    replicas: 3
    selector:
        matchLabels:
            app: ordersystem-backend
    template:
        metadata:
            labels:
                app: ordersystem-backend
        spec:
            containers:
                - name: ordersystem-backend
                  # ECR 주소 (내 스프링 이미지 주소)
                  image: 384471040257.dkr.ecr.ap-northeast-2.amazonaws.com/order-backend:latest
                  ports:
                      - containerPort: 8080
                  # 파드는 EC2 위에서 실행이 된다. EC2는 컴퓨팅 자원. 우리가 컴퓨팅 자원의 스펙을 할당하는 거임.
                  # 별 다른 설정을 걸어두지 않으면 POD가 MAX치로 EC2의 자원을 모두 사용하기 때문에 설정함.
                  resources:
                      # 컨테이너가 사용할수 있는 리소스의 최대치
                      limits:
                          cpu: "1"
                          memory: "500Mi"
                      # 컨테이너가 시작될떄 보장받아야 하는 최소 자원
                      requests:
                          cpu: "0.5"
                          memory: "250Mi"
                  env: #ENV 설정이 우리가 변수화 했던 값들을 가져오는 설정
                      # name값과 yml의 ${변수} 의 변수명과 일치해야함
                      - name: DB_HOST
                        valueFrom:
                            secretKeyRef:
                                name: my-app-secrets
                                key: DB_HOST
                      - name: DB_PW
                        valueFrom:
                            secretKeyRef:
                                name: my-app-secrets
                                key: DB_PW
                  # 컨테이너 상태 확인을 통해 롤링업데이트 최적화
                  # 온전히 스프링 서버가 실행됐는지 체크를 하는 로직
                  readinessProbe:
                      httpGet:
                          # healthcheck 경로
                          path: /health
                          port: 8080
                      # 컨테이너 시작 후 지연
                      initialDelaySeconds: 10
                      # 확인 반복 주기
                      periodSeconds: 10

---
apiVersion: v1
kind: Service
metadata:
    name: ordersystem-backend-service
    namespace: hyunsub
spec:
    type: ClusterIP
    ports:
        - port: 80
          targetPort: 8080
    selector:
        app: ordersystem-backend
