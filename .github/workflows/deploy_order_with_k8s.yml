# name은 우리가 적절하게 지으면 된다.
name: deploy order order-backend

# 이런 문법을 이벤트라고 부른다. 의미는 main 브런치에 소스코드가 푸시되면 밑에 스크립트를 실행하겠다 라는 거임.
# push뿐 아니라 여러 이벤트로 정의할 수 있다.
on:
    push:
        branches:
            - dev

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
            - name: checkout github
              # 여긴 지금 가상 pc이니까 나의 github에 소스코드를 이 가상pc로 가지고 오겠다라는 명령어이다. @v2는 version2라는 의미
              # 소스코드를 가지고 오려면 git clone 해가지고 땡겨와야 함. 그걸 run으로 정의할 수도 있겠지만 그런 명령어를 쉽게 사용할 수 있도록 누가 프로그램으로 만들어 둔 거다.
              uses: actions/checkout@v2
              # 여기까지 진행하면 소스코드를 가지고 왔을 거다.

            - name: install kubectl
              # 파드를 재생성 해야 하니까 이 가상 pc 안에서 kubectl 관련 명령어를 사용해줘야 함. 그래서 kubectl 프로그램을 설치할 건데 우리가 직접 설치할 수도 있을 거임.
              # ubuntu 명령어를 가지고 직접 설치할 수 있겠지만, 누군가가 미리 만들어놓은 kubectl 설치 명령어 집합을 uses 명령어를 통해 설치하는 거다.
              uses: azure/setup-kubectl@v3
              with:
                  version: "v1.25.9"
              id: install

            - name: configure aws
              # AWS CLI 설치
              # 우리가 AWS의 자원을 사용하려면 AWS Configure를 해서 우리 access-key랑 secret-key를 로컬에다가 세팅을 했었다.
              # 근데 소스코드에다가 이 값들을 올리게 되면 노출이 된다. 굉장히 아주 아주 민감한 정보임. 해킹당하잖아.
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  # 우리가 로컬에서 적어줬던 세팅값들을 모두 다 명시함. key 값들은 github Settings -> Secrets and variable 이라는 곳에 정의를 함.
                  # secrets.~ 는 깃허브 시크릿에다가 정의한 값들을 불러오는 코드라고 보면 된다.
                  aws-access-key-id: ${{ secrets.AWS_KEY }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET }}
                  aws-region: ap-northeast-2

            - name: update cluster infomation
              # 클러스터 세팅
              # 그 다음 쿠버네티스에 접근을 해야한다. my-cluster 에다가 내가 kubectl을 통해서 접근할거다 라는 걸 세팅해줘야 함. (13. 클러스터 생성 및 aws cil, kubectl 세팅)
              run: aws eks update-kubeconfig --name  my-clusters --region ap-northeast-2

            - name: Login to ECR
              id: login-ecr
              # ECR 로그인
              # ECR로 로그인하는 명령어이다.
              uses: aws-actions/amazon-ecr-login@v1

            - name: build and push docker image to ecr
              env:
                  # 여기에 우리의 ECR 주소를 넣으면 된다.
                  REGISTRY: 384471040257.dkr.ecr.ap-northeast-2.amazonaws.com
                  REPOSITORY: order-backend
                  IMAGE_TAG: latest
                  # 현재 위치에 Dockerfile이 있는 경우는 -f 생략이 가능하고 . 만 찍어도 된다 했음.
                  # 하지만 GithubActions 워크플로우의 현재 위치는 어디냐면 무조건 해당 프로젝트의 루트에 위치해 있다고 보면 된다.
                  # 루트 경로에는 Dockerfile이 없기 때문에 이렇게 어디를 빌드해야하는지 경로를 상세하게 알려줘야 하는 것.
                  # 이미지 만들고 푸시해버림.
              run: |
                  docker build \
                  -t $REGISTRY/$REPOSITORY:$IMAGE_TAG \
                  -f ./2.ordersystem/Dockerfile ./2.ordersystem
                  docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

            - name: eks kubectl apply
              # 이미지 기반으로 파드 재생성
              run: |
                  kubectl rollout restart deployment ordersystem-backend -n hyunsub
              # kubectl apply -f ./2.ordersystem/k8s/k8s-ordersystem/depl_svc.yml
